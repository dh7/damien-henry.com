'use client';

import Link from 'next/link';
import { useEffect, useRef } from 'react';

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface ChatConversationProps {
  messages: Message[];
}

// Parse markdown formatting and convert to React elements
function parseMarkdown(text: string): (string | JSX.Element)[] {
  const parts: (string | JSX.Element)[] = [];
  let currentIndex = 0;
  let keyCounter = 0;

  // Combined regex for all markdown patterns
  // Order matters: links first, then bold, italic, code
  // Note: *italic* is NOT supported to avoid conflicts with regular asterisks
  const markdownRegex = /(\[([^\]]+)\]\(([^)]+)\))|(\*\*([^*]+)\*\*)|(__([^_]+)__)|(_([^_]+)_)|(`([^`]+)`)/g;
  let match;

  while ((match = markdownRegex.exec(text)) !== null) {
    // Add text before the match
    if (match.index > currentIndex) {
      parts.push(text.slice(currentIndex, match.index));
    }

    // Determine which pattern matched and render accordingly
    if (match[1]) {
      // Link: [text](url)
      const linkText = match[2];
      let url = match[3];
      
      // Validate and fix URLs - ensure they're relative
      // Remove any absolute URLs with wrong domains
      if (url.startsWith('http://') || url.startsWith('https://')) {
        try {
          const urlObj = new URL(url);
          // Extract just the pathname (relative URL)
          url = urlObj.pathname;
          console.warn(`⚠️ AI generated absolute URL, converted to relative: ${match[3]} → ${url}`);
        } catch (e) {
          console.error('Invalid URL generated by AI:', url);
          // Fallback to the original if parsing fails
        }
      }
      
      // Ensure URL starts with /
      if (!url.startsWith('/')) {
        url = '/' + url;
        console.warn(`⚠️ AI generated URL without leading slash, fixed: ${match[3]} → ${url}`);
      }
      
      parts.push(
        <Link 
          key={`link-${keyCounter++}`}
          href={url}
          className="text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 underline underline-offset-2"
          style={{ textDecoration: 'underline' }}
        >
          {linkText}
        </Link>
      );
    } else if (match[4]) {
      // Bold: **text**
      parts.push(
        <strong key={`bold-${keyCounter++}`} className="font-bold">
          {match[5]}
        </strong>
      );
    } else if (match[6]) {
      // Bold: __text__
      parts.push(
        <strong key={`bold-${keyCounter++}`} className="font-bold">
          {match[7]}
        </strong>
      );
    } else if (match[8]) {
      // Italic: _text_ (single asterisks NOT supported to avoid conflicts)
      parts.push(
        <em key={`italic-${keyCounter++}`} className="italic">
          {match[9]}
        </em>
      );
    } else if (match[10]) {
      // Code: `text`
      parts.push(
        <code 
          key={`code-${keyCounter++}`}
          className="bg-gray-200 dark:bg-gray-700 px-1 py-0.5 rounded text-sm font-mono"
        >
          {match[11]}
        </code>
      );
    }

    currentIndex = match.index + match[0].length;
  }

  // Add remaining text
  if (currentIndex < text.length) {
    parts.push(text.slice(currentIndex));
  }

  return parts.length > 0 ? parts : [text];
}

export default function ChatConversation({ messages }: ChatConversationProps) {
  const scrollRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div ref={scrollRef} className="flex-1 overflow-y-auto space-y-6" style={{ fontFamily: 'monospace', fontSize: '14px', padding: '16px' }}>
      {messages.map((message) => (
        <div key={message.id} className="flex items-start gap-2">
          <span className={`flex-shrink-0 ${
            message.role === 'user' 
              ? 'text-gray-700 dark:text-white font-bold' 
              : 'text-gray-500 dark:text-gray-400'
          }`}>
            {message.role === 'user' ? '<' : '>'}
          </span>
          <div className={`flex-1 whitespace-pre-wrap break-words ${
            message.role === 'user' 
              ? 'text-gray-700 dark:text-white font-bold' 
              : 'text-gray-600 dark:text-gray-300'
          }`}>
            {parseMarkdown(message.content)}
          </div>
        </div>
      ))}
    </div>
  );
}
